"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-slick";
exports.ids = ["vendor-chunks/react-slick"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-slick/lib/arrows.js":
/*!************************************************!*\
  !*** ./node_modules/react-slick/lib/arrows.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PrevArrow = exports.NextArrow = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _innerSliderUtils = __webpack_require__(/*! ./utils/innerSliderUtils */ \"(ssr)/./node_modules/react-slick/lib/utils/innerSliderUtils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nvar PrevArrow = /*#__PURE__*/ function(_React$PureComponent) {\n    _inherits(PrevArrow, _React$PureComponent);\n    var _super = _createSuper(PrevArrow);\n    function PrevArrow() {\n        _classCallCheck(this, PrevArrow);\n        return _super.apply(this, arguments);\n    }\n    _createClass(PrevArrow, [\n        {\n            key: \"clickHandler\",\n            value: function clickHandler(options, e) {\n                if (e) {\n                    e.preventDefault();\n                }\n                this.props.clickHandler(options, e);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var prevClasses = {\n                    \"slick-arrow\": true,\n                    \"slick-prev\": true\n                };\n                var prevHandler = this.clickHandler.bind(this, {\n                    message: \"previous\"\n                });\n                if (!this.props.infinite && (this.props.currentSlide === 0 || this.props.slideCount <= this.props.slidesToShow)) {\n                    prevClasses[\"slick-disabled\"] = true;\n                    prevHandler = null;\n                }\n                var prevArrowProps = {\n                    key: \"0\",\n                    \"data-role\": \"none\",\n                    className: (0, _classnames[\"default\"])(prevClasses),\n                    style: {\n                        display: \"block\"\n                    },\n                    onClick: prevHandler\n                };\n                var customProps = {\n                    currentSlide: this.props.currentSlide,\n                    slideCount: this.props.slideCount\n                };\n                var prevArrow;\n                if (this.props.prevArrow) {\n                    prevArrow = /*#__PURE__*/ _react[\"default\"].cloneElement(this.props.prevArrow, _objectSpread(_objectSpread({}, prevArrowProps), customProps));\n                } else {\n                    prevArrow = /*#__PURE__*/ _react[\"default\"].createElement(\"button\", _extends({\n                        key: \"0\",\n                        type: \"button\"\n                    }, prevArrowProps), \" \", \"Previous\");\n                }\n                return prevArrow;\n            }\n        }\n    ]);\n    return PrevArrow;\n}(_react[\"default\"].PureComponent);\nexports.PrevArrow = PrevArrow;\nvar NextArrow = /*#__PURE__*/ function(_React$PureComponent2) {\n    _inherits(NextArrow, _React$PureComponent2);\n    var _super2 = _createSuper(NextArrow);\n    function NextArrow() {\n        _classCallCheck(this, NextArrow);\n        return _super2.apply(this, arguments);\n    }\n    _createClass(NextArrow, [\n        {\n            key: \"clickHandler\",\n            value: function clickHandler(options, e) {\n                if (e) {\n                    e.preventDefault();\n                }\n                this.props.clickHandler(options, e);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var nextClasses = {\n                    \"slick-arrow\": true,\n                    \"slick-next\": true\n                };\n                var nextHandler = this.clickHandler.bind(this, {\n                    message: \"next\"\n                });\n                if (!(0, _innerSliderUtils.canGoNext)(this.props)) {\n                    nextClasses[\"slick-disabled\"] = true;\n                    nextHandler = null;\n                }\n                var nextArrowProps = {\n                    key: \"1\",\n                    \"data-role\": \"none\",\n                    className: (0, _classnames[\"default\"])(nextClasses),\n                    style: {\n                        display: \"block\"\n                    },\n                    onClick: nextHandler\n                };\n                var customProps = {\n                    currentSlide: this.props.currentSlide,\n                    slideCount: this.props.slideCount\n                };\n                var nextArrow;\n                if (this.props.nextArrow) {\n                    nextArrow = /*#__PURE__*/ _react[\"default\"].cloneElement(this.props.nextArrow, _objectSpread(_objectSpread({}, nextArrowProps), customProps));\n                } else {\n                    nextArrow = /*#__PURE__*/ _react[\"default\"].createElement(\"button\", _extends({\n                        key: \"1\",\n                        type: \"button\"\n                    }, nextArrowProps), \" \", \"Next\");\n                }\n                return nextArrow;\n            }\n        }\n    ]);\n    return NextArrow;\n}(_react[\"default\"].PureComponent);\nexports.NextArrow = NextArrow;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/arrows.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/default-props.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-slick/lib/default-props.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nvar defaultProps = {\n    accessibility: true,\n    adaptiveHeight: false,\n    afterChange: null,\n    appendDots: function appendDots(dots) {\n        return /*#__PURE__*/ _react[\"default\"].createElement(\"ul\", {\n            style: {\n                display: \"block\"\n            }\n        }, dots);\n    },\n    arrows: true,\n    autoplay: false,\n    autoplaySpeed: 3000,\n    beforeChange: null,\n    centerMode: false,\n    centerPadding: \"50px\",\n    className: \"\",\n    cssEase: \"ease\",\n    customPaging: function customPaging(i) {\n        return /*#__PURE__*/ _react[\"default\"].createElement(\"button\", null, i + 1);\n    },\n    dots: false,\n    dotsClass: \"slick-dots\",\n    draggable: true,\n    easing: \"linear\",\n    edgeFriction: 0.35,\n    fade: false,\n    focusOnSelect: false,\n    infinite: true,\n    initialSlide: 0,\n    lazyLoad: null,\n    nextArrow: null,\n    onEdge: null,\n    onInit: null,\n    onLazyLoadError: null,\n    onReInit: null,\n    pauseOnDotsHover: false,\n    pauseOnFocus: false,\n    pauseOnHover: true,\n    prevArrow: null,\n    responsive: null,\n    rows: 1,\n    rtl: false,\n    slide: \"div\",\n    slidesPerRow: 1,\n    slidesToScroll: 1,\n    slidesToShow: 1,\n    speed: 500,\n    swipe: true,\n    swipeEvent: null,\n    swipeToSlide: false,\n    touchMove: true,\n    touchThreshold: 5,\n    useCSS: true,\n    useTransform: true,\n    variableWidth: false,\n    vertical: false,\n    waitForAnimate: true\n};\nvar _default = defaultProps;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2RlZmF1bHQtcHJvcHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsU0FBU0MsdUJBQXVCQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUVuRCxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQUc7QUFFaEcsSUFBSUUsZUFBZTtJQUNqQkMsZUFBZTtJQUNmQyxnQkFBZ0I7SUFDaEJDLGFBQWE7SUFDYkMsWUFBWSxTQUFTQSxXQUFXQyxJQUFJO1FBQ2xDLE9BQU8sV0FBVyxHQUFFVixNQUFNLENBQUMsVUFBVSxDQUFDVyxhQUFhLENBQUMsTUFBTTtZQUN4REMsT0FBTztnQkFDTEMsU0FBUztZQUNYO1FBQ0YsR0FBR0g7SUFDTDtJQUNBSSxRQUFRO0lBQ1JDLFVBQVU7SUFDVkMsZUFBZTtJQUNmQyxjQUFjO0lBQ2RDLFlBQVk7SUFDWkMsZUFBZTtJQUNmQyxXQUFXO0lBQ1hDLFNBQVM7SUFDVEMsY0FBYyxTQUFTQSxhQUFhQyxDQUFDO1FBQ25DLE9BQU8sV0FBVyxHQUFFdkIsTUFBTSxDQUFDLFVBQVUsQ0FBQ1csYUFBYSxDQUFDLFVBQVUsTUFBTVksSUFBSTtJQUMxRTtJQUNBYixNQUFNO0lBQ05jLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxRQUFRO0lBQ1JDLGNBQWM7SUFDZEMsTUFBTTtJQUNOQyxlQUFlO0lBQ2ZDLFVBQVU7SUFDVkMsY0FBYztJQUNkQyxVQUFVO0lBQ1ZDLFdBQVc7SUFDWEMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLGlCQUFpQjtJQUNqQkMsVUFBVTtJQUNWQyxrQkFBa0I7SUFDbEJDLGNBQWM7SUFDZEMsY0FBYztJQUNkQyxXQUFXO0lBQ1hDLFlBQVk7SUFDWkMsTUFBTTtJQUNOQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsY0FBYztJQUNkQyxnQkFBZ0I7SUFDaEJDLGNBQWM7SUFDZEMsT0FBTztJQUNQQyxPQUFPO0lBQ1BDLFlBQVk7SUFDWkMsY0FBYztJQUNkQyxXQUFXO0lBQ1hDLGdCQUFnQjtJQUNoQkMsUUFBUTtJQUNSQyxjQUFjO0lBQ2RDLGVBQWU7SUFDZkMsVUFBVTtJQUNWQyxnQkFBZ0I7QUFDbEI7QUFDQSxJQUFJQyxXQUFXdkQ7QUFDZlAsa0JBQWtCLEdBQUc4RCIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbXktcmVhbC1lc3RhdGUvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2RlZmF1bHQtcHJvcHMuanM/Yzk1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICBhZnRlckNoYW5nZTogbnVsbCxcbiAgYXBwZW5kRG90czogZnVuY3Rpb24gYXBwZW5kRG90cyhkb3RzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICAgIH1cbiAgICB9LCBkb3RzKTtcbiAgfSxcbiAgYXJyb3dzOiB0cnVlLFxuICBhdXRvcGxheTogZmFsc2UsXG4gIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gIGJlZm9yZUNoYW5nZTogbnVsbCxcbiAgY2VudGVyTW9kZTogZmFsc2UsXG4gIGNlbnRlclBhZGRpbmc6IFwiNTBweFwiLFxuICBjbGFzc05hbWU6IFwiXCIsXG4gIGNzc0Vhc2U6IFwiZWFzZVwiLFxuICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uIGN1c3RvbVBhZ2luZyhpKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgbnVsbCwgaSArIDEpO1xuICB9LFxuICBkb3RzOiBmYWxzZSxcbiAgZG90c0NsYXNzOiBcInNsaWNrLWRvdHNcIixcbiAgZHJhZ2dhYmxlOiB0cnVlLFxuICBlYXNpbmc6IFwibGluZWFyXCIsXG4gIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgZmFkZTogZmFsc2UsXG4gIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICBpbmZpbml0ZTogdHJ1ZSxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBsYXp5TG9hZDogbnVsbCxcbiAgbmV4dEFycm93OiBudWxsLFxuICBvbkVkZ2U6IG51bGwsXG4gIG9uSW5pdDogbnVsbCxcbiAgb25MYXp5TG9hZEVycm9yOiBudWxsLFxuICBvblJlSW5pdDogbnVsbCxcbiAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gIHBhdXNlT25Gb2N1czogZmFsc2UsXG4gIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgcHJldkFycm93OiBudWxsLFxuICByZXNwb25zaXZlOiBudWxsLFxuICByb3dzOiAxLFxuICBydGw6IGZhbHNlLFxuICBzbGlkZTogXCJkaXZcIixcbiAgc2xpZGVzUGVyUm93OiAxLFxuICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgc2xpZGVzVG9TaG93OiAxLFxuICBzcGVlZDogNTAwLFxuICBzd2lwZTogdHJ1ZSxcbiAgc3dpcGVFdmVudDogbnVsbCxcbiAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgdG91Y2hNb3ZlOiB0cnVlLFxuICB0b3VjaFRocmVzaG9sZDogNSxcbiAgdXNlQ1NTOiB0cnVlLFxuICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICB2ZXJ0aWNhbDogZmFsc2UsXG4gIHdhaXRGb3JBbmltYXRlOiB0cnVlXG59O1xudmFyIF9kZWZhdWx0ID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0UHJvcHMiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhZnRlckNoYW5nZSIsImFwcGVuZERvdHMiLCJkb3RzIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiZGlzcGxheSIsImFycm93cyIsImF1dG9wbGF5IiwiYXV0b3BsYXlTcGVlZCIsImJlZm9yZUNoYW5nZSIsImNlbnRlck1vZGUiLCJjZW50ZXJQYWRkaW5nIiwiY2xhc3NOYW1lIiwiY3NzRWFzZSIsImN1c3RvbVBhZ2luZyIsImkiLCJkb3RzQ2xhc3MiLCJkcmFnZ2FibGUiLCJlYXNpbmciLCJlZGdlRnJpY3Rpb24iLCJmYWRlIiwiZm9jdXNPblNlbGVjdCIsImluZmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJuZXh0QXJyb3ciLCJvbkVkZ2UiLCJvbkluaXQiLCJvbkxhenlMb2FkRXJyb3IiLCJvblJlSW5pdCIsInBhdXNlT25Eb3RzSG92ZXIiLCJwYXVzZU9uRm9jdXMiLCJwYXVzZU9uSG92ZXIiLCJwcmV2QXJyb3ciLCJyZXNwb25zaXZlIiwicm93cyIsInJ0bCIsInNsaWRlIiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TY3JvbGwiLCJzbGlkZXNUb1Nob3ciLCJzcGVlZCIsInN3aXBlIiwic3dpcGVFdmVudCIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidXNlVHJhbnNmb3JtIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsIiwid2FpdEZvckFuaW1hdGUiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/default-props.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/dots.js":
/*!**********************************************!*\
  !*** ./node_modules/react-slick/lib/dots.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Dots = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _innerSliderUtils = __webpack_require__(/*! ./utils/innerSliderUtils */ \"(ssr)/./node_modules/react-slick/lib/utils/innerSliderUtils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nvar getDotCount = function getDotCount(spec) {\n    var dots;\n    if (spec.infinite) {\n        dots = Math.ceil(spec.slideCount / spec.slidesToScroll);\n    } else {\n        dots = Math.ceil((spec.slideCount - spec.slidesToShow) / spec.slidesToScroll) + 1;\n    }\n    return dots;\n};\nvar Dots = /*#__PURE__*/ function(_React$PureComponent) {\n    _inherits(Dots, _React$PureComponent);\n    var _super = _createSuper(Dots);\n    function Dots() {\n        _classCallCheck(this, Dots);\n        return _super.apply(this, arguments);\n    }\n    _createClass(Dots, [\n        {\n            key: \"clickHandler\",\n            value: function clickHandler(options, e) {\n                // In Autoplay the focus stays on clicked button even after transition\n                // to next slide. That only goes away by click somewhere outside\n                e.preventDefault();\n                this.props.clickHandler(options);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, onMouseEnter = _this$props.onMouseEnter, onMouseOver = _this$props.onMouseOver, onMouseLeave = _this$props.onMouseLeave, infinite = _this$props.infinite, slidesToScroll = _this$props.slidesToScroll, slidesToShow = _this$props.slidesToShow, slideCount = _this$props.slideCount, currentSlide = _this$props.currentSlide;\n                var dotCount = getDotCount({\n                    slideCount: slideCount,\n                    slidesToScroll: slidesToScroll,\n                    slidesToShow: slidesToShow,\n                    infinite: infinite\n                });\n                var mouseEvents = {\n                    onMouseEnter: onMouseEnter,\n                    onMouseOver: onMouseOver,\n                    onMouseLeave: onMouseLeave\n                };\n                var dots = [];\n                for(var i = 0; i < dotCount; i++){\n                    var _rightBound = (i + 1) * slidesToScroll - 1;\n                    var rightBound = infinite ? _rightBound : (0, _innerSliderUtils.clamp)(_rightBound, 0, slideCount - 1);\n                    var _leftBound = rightBound - (slidesToScroll - 1);\n                    var leftBound = infinite ? _leftBound : (0, _innerSliderUtils.clamp)(_leftBound, 0, slideCount - 1);\n                    var className = (0, _classnames[\"default\"])({\n                        \"slick-active\": infinite ? currentSlide >= leftBound && currentSlide <= rightBound : currentSlide === leftBound\n                    });\n                    var dotOptions = {\n                        message: \"dots\",\n                        index: i,\n                        slidesToScroll: slidesToScroll,\n                        currentSlide: currentSlide\n                    };\n                    var onClick = this.clickHandler.bind(this, dotOptions);\n                    dots = dots.concat(/*#__PURE__*/ _react[\"default\"].createElement(\"li\", {\n                        key: i,\n                        className: className\n                    }, /*#__PURE__*/ _react[\"default\"].cloneElement(this.props.customPaging(i), {\n                        onClick: onClick\n                    })));\n                }\n                return /*#__PURE__*/ _react[\"default\"].cloneElement(this.props.appendDots(dots), _objectSpread({\n                    className: this.props.dotsClass\n                }, mouseEvents));\n            }\n        }\n    ]);\n    return Dots;\n}(_react[\"default\"].PureComponent);\nexports.Dots = Dots;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/dots.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/react-slick/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _slider = _interopRequireDefault(__webpack_require__(/*! ./slider */ \"(ssr)/./node_modules/react-slick/lib/slider.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nvar _default = _slider[\"default\"];\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFVBQVVDLHVCQUF1QkMsbUJBQU9BLENBQUMsZ0VBQVU7QUFFdkQsU0FBU0QsdUJBQXVCRSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUFHO0FBRWhHLElBQUlFLFdBQVdMLE9BQU8sQ0FBQyxVQUFVO0FBQ2pDRixrQkFBa0IsR0FBR08iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob215LXJlYWwtZXN0YXRlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNsaWNrL2xpYi9pbmRleC5qcz9hMDc0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfc2xpZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zbGlkZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxudmFyIF9kZWZhdWx0ID0gX3NsaWRlcltcImRlZmF1bHRcIl07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9zbGlkZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/initial-state.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-slick/lib/initial-state.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar initialState = {\n    animating: false,\n    autoplaying: null,\n    currentDirection: 0,\n    currentLeft: null,\n    currentSlide: 0,\n    direction: 1,\n    dragging: false,\n    edgeDragged: false,\n    initialized: false,\n    lazyLoadedList: [],\n    listHeight: null,\n    listWidth: null,\n    scrolling: false,\n    slideCount: null,\n    slideHeight: null,\n    slideWidth: null,\n    swipeLeft: null,\n    swiped: false,\n    // used by swipeEvent. differentites between touch and swipe.\n    swiping: false,\n    touchObject: {\n        startX: 0,\n        startY: 0,\n        curX: 0,\n        curY: 0\n    },\n    trackStyle: {},\n    trackWidth: 0,\n    targetSlide: 0\n};\nvar _default = initialState;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luaXRpYWwtc3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsSUFBSUUsZUFBZTtJQUNqQkMsV0FBVztJQUNYQyxhQUFhO0lBQ2JDLGtCQUFrQjtJQUNsQkMsYUFBYTtJQUNiQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsVUFBVTtJQUNWQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsZ0JBQWdCLEVBQUU7SUFDbEJDLFlBQVk7SUFDWkMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFlBQVk7SUFDWkMsYUFBYTtJQUNiQyxZQUFZO0lBQ1pDLFdBQVc7SUFDWEMsUUFBUTtJQUNSLDZEQUE2RDtJQUM3REMsU0FBUztJQUNUQyxhQUFhO1FBQ1hDLFFBQVE7UUFDUkMsUUFBUTtRQUNSQyxNQUFNO1FBQ05DLE1BQU07SUFDUjtJQUNBQyxZQUFZLENBQUM7SUFDYkMsWUFBWTtJQUNaQyxhQUFhO0FBQ2Y7QUFDQSxJQUFJQyxXQUFXNUI7QUFDZkYsa0JBQWtCLEdBQUc4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbXktcmVhbC1lc3RhdGUvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luaXRpYWwtc3RhdGUuanM/NjM1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgYXV0b3BsYXlpbmc6IG51bGwsXG4gIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gIGN1cnJlbnRMZWZ0OiBudWxsLFxuICBjdXJyZW50U2xpZGU6IDAsXG4gIGRpcmVjdGlvbjogMSxcbiAgZHJhZ2dpbmc6IGZhbHNlLFxuICBlZGdlRHJhZ2dlZDogZmFsc2UsXG4gIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgbGF6eUxvYWRlZExpc3Q6IFtdLFxuICBsaXN0SGVpZ2h0OiBudWxsLFxuICBsaXN0V2lkdGg6IG51bGwsXG4gIHNjcm9sbGluZzogZmFsc2UsXG4gIHNsaWRlQ291bnQ6IG51bGwsXG4gIHNsaWRlSGVpZ2h0OiBudWxsLFxuICBzbGlkZVdpZHRoOiBudWxsLFxuICBzd2lwZUxlZnQ6IG51bGwsXG4gIHN3aXBlZDogZmFsc2UsXG4gIC8vIHVzZWQgYnkgc3dpcGVFdmVudC4gZGlmZmVyZW50aXRlcyBiZXR3ZWVuIHRvdWNoIGFuZCBzd2lwZS5cbiAgc3dpcGluZzogZmFsc2UsXG4gIHRvdWNoT2JqZWN0OiB7XG4gICAgc3RhcnRYOiAwLFxuICAgIHN0YXJ0WTogMCxcbiAgICBjdXJYOiAwLFxuICAgIGN1clk6IDBcbiAgfSxcbiAgdHJhY2tTdHlsZToge30sXG4gIHRyYWNrV2lkdGg6IDAsXG4gIHRhcmdldFNsaWRlOiAwXG59O1xudmFyIF9kZWZhdWx0ID0gaW5pdGlhbFN0YXRlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbml0aWFsU3RhdGUiLCJhbmltYXRpbmciLCJhdXRvcGxheWluZyIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImN1cnJlbnRTbGlkZSIsImRpcmVjdGlvbiIsImRyYWdnaW5nIiwiZWRnZURyYWdnZWQiLCJpbml0aWFsaXplZCIsImxhenlMb2FkZWRMaXN0IiwibGlzdEhlaWdodCIsImxpc3RXaWR0aCIsInNjcm9sbGluZyIsInNsaWRlQ291bnQiLCJzbGlkZUhlaWdodCIsInNsaWRlV2lkdGgiLCJzd2lwZUxlZnQiLCJzd2lwZWQiLCJzd2lwaW5nIiwidG91Y2hPYmplY3QiLCJzdGFydFgiLCJzdGFydFkiLCJjdXJYIiwiY3VyWSIsInRyYWNrU3R5bGUiLCJ0cmFja1dpZHRoIiwidGFyZ2V0U2xpZGUiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/initial-state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/inner-slider.js":
/*!******************************************************!*\
  !*** ./node_modules/react-slick/lib/inner-slider.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InnerSlider = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _initialState = _interopRequireDefault(__webpack_require__(/*! ./initial-state */ \"(ssr)/./node_modules/react-slick/lib/initial-state.js\"));\nvar _lodash = _interopRequireDefault(__webpack_require__(/*! lodash.debounce */ \"(ssr)/./node_modules/lodash.debounce/index.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _innerSliderUtils = __webpack_require__(/*! ./utils/innerSliderUtils */ \"(ssr)/./node_modules/react-slick/lib/utils/innerSliderUtils.js\");\nvar _track = __webpack_require__(/*! ./track */ \"(ssr)/./node_modules/react-slick/lib/track.js\");\nvar _dots = __webpack_require__(/*! ./dots */ \"(ssr)/./node_modules/react-slick/lib/dots.js\");\nvar _arrows = __webpack_require__(/*! ./arrows */ \"(ssr)/./node_modules/react-slick/lib/arrows.js\");\nvar _resizeObserverPolyfill = _interopRequireDefault(__webpack_require__(/*! resize-observer-polyfill */ \"(ssr)/./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar InnerSlider = /*#__PURE__*/ function(_React$Component) {\n    _inherits(InnerSlider, _React$Component);\n    var _super = _createSuper(InnerSlider);\n    function InnerSlider(props) {\n        var _this;\n        _classCallCheck(this, InnerSlider);\n        _this = _super.call(this, props);\n        _defineProperty(_assertThisInitialized(_this), \"listRefHandler\", function(ref) {\n            return _this.list = ref;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"trackRefHandler\", function(ref) {\n            return _this.track = ref;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"adaptHeight\", function() {\n            if (_this.props.adaptiveHeight && _this.list) {\n                var elem = _this.list.querySelector('[data-index=\"'.concat(_this.state.currentSlide, '\"]'));\n                _this.list.style.height = (0, _innerSliderUtils.getHeight)(elem) + \"px\";\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function() {\n            _this.props.onInit && _this.props.onInit();\n            if (_this.props.lazyLoad) {\n                var slidesToLoad = (0, _innerSliderUtils.getOnDemandLazySlides)(_objectSpread(_objectSpread({}, _this.props), _this.state));\n                if (slidesToLoad.length > 0) {\n                    _this.setState(function(prevState) {\n                        return {\n                            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n                        };\n                    });\n                    if (_this.props.onLazyLoad) {\n                        _this.props.onLazyLoad(slidesToLoad);\n                    }\n                }\n            }\n            var spec = _objectSpread({\n                listRef: _this.list,\n                trackRef: _this.track\n            }, _this.props);\n            _this.updateState(spec, true, function() {\n                _this.adaptHeight();\n                _this.props.autoplay && _this.autoPlay(\"update\");\n            });\n            if (_this.props.lazyLoad === \"progressive\") {\n                _this.lazyLoadTimer = setInterval(_this.progressiveLazyLoad, 1000);\n            }\n            _this.ro = new _resizeObserverPolyfill[\"default\"](function() {\n                if (_this.state.animating) {\n                    _this.onWindowResized(false); // don't set trackStyle hence don't break animation\n                    _this.callbackTimers.push(setTimeout(function() {\n                        return _this.onWindowResized();\n                    }, _this.props.speed));\n                } else {\n                    _this.onWindowResized();\n                }\n            });\n            _this.ro.observe(_this.list);\n            document.querySelectorAll && Array.prototype.forEach.call(document.querySelectorAll(\".slick-slide\"), function(slide) {\n                slide.onfocus = _this.props.pauseOnFocus ? _this.onSlideFocus : null;\n                slide.onblur = _this.props.pauseOnFocus ? _this.onSlideBlur : null;\n            });\n            if (window.addEventListener) {\n                window.addEventListener(\"resize\", _this.onWindowResized);\n            } else {\n                window.attachEvent(\"onresize\", _this.onWindowResized);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function() {\n            if (_this.animationEndCallback) {\n                clearTimeout(_this.animationEndCallback);\n            }\n            if (_this.lazyLoadTimer) {\n                clearInterval(_this.lazyLoadTimer);\n            }\n            if (_this.callbackTimers.length) {\n                _this.callbackTimers.forEach(function(timer) {\n                    return clearTimeout(timer);\n                });\n                _this.callbackTimers = [];\n            }\n            if (window.addEventListener) {\n                window.removeEventListener(\"resize\", _this.onWindowResized);\n            } else {\n                window.detachEvent(\"onresize\", _this.onWindowResized);\n            }\n            if (_this.autoplayTimer) {\n                clearInterval(_this.autoplayTimer);\n            }\n            _this.ro.disconnect();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function(prevProps) {\n            _this.checkImagesLoad();\n            _this.props.onReInit && _this.props.onReInit();\n            if (_this.props.lazyLoad) {\n                var slidesToLoad = (0, _innerSliderUtils.getOnDemandLazySlides)(_objectSpread(_objectSpread({}, _this.props), _this.state));\n                if (slidesToLoad.length > 0) {\n                    _this.setState(function(prevState) {\n                        return {\n                            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)\n                        };\n                    });\n                    if (_this.props.onLazyLoad) {\n                        _this.props.onLazyLoad(slidesToLoad);\n                    }\n                }\n            } // if (this.props.onLazyLoad) {\n            //   this.props.onLazyLoad([leftMostSlide])\n            // }\n            _this.adaptHeight();\n            var spec = _objectSpread(_objectSpread({\n                listRef: _this.list,\n                trackRef: _this.track\n            }, _this.props), _this.state);\n            var setTrackStyle = _this.didPropsChange(prevProps);\n            setTrackStyle && _this.updateState(spec, setTrackStyle, function() {\n                if (_this.state.currentSlide >= _react[\"default\"].Children.count(_this.props.children)) {\n                    _this.changeSlide({\n                        message: \"index\",\n                        index: _react[\"default\"].Children.count(_this.props.children) - _this.props.slidesToShow,\n                        currentSlide: _this.state.currentSlide\n                    });\n                }\n                if (_this.props.autoplay) {\n                    _this.autoPlay(\"update\");\n                } else {\n                    _this.pause(\"paused\");\n                }\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onWindowResized\", function(setTrackStyle) {\n            if (_this.debouncedResize) _this.debouncedResize.cancel();\n            _this.debouncedResize = (0, _lodash[\"default\"])(function() {\n                return _this.resizeWindow(setTrackStyle);\n            }, 50);\n            _this.debouncedResize();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"resizeWindow\", function() {\n            var setTrackStyle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n            var isTrackMounted = Boolean(_this.track && _this.track.node); // prevent warning: setting state on unmounted component (server side rendering)\n            if (!isTrackMounted) return;\n            var spec = _objectSpread(_objectSpread({\n                listRef: _this.list,\n                trackRef: _this.track\n            }, _this.props), _this.state);\n            _this.updateState(spec, setTrackStyle, function() {\n                if (_this.props.autoplay) _this.autoPlay(\"update\");\n                else _this.pause(\"paused\");\n            }); // animating state should be cleared while resizing, otherwise autoplay stops working\n            _this.setState({\n                animating: false\n            });\n            clearTimeout(_this.animationEndCallback);\n            delete _this.animationEndCallback;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"updateState\", function(spec, setTrackStyle, callback) {\n            var updatedState = (0, _innerSliderUtils.initializedState)(spec);\n            spec = _objectSpread(_objectSpread(_objectSpread({}, spec), updatedState), {}, {\n                slideIndex: updatedState.currentSlide\n            });\n            var targetLeft = (0, _innerSliderUtils.getTrackLeft)(spec);\n            spec = _objectSpread(_objectSpread({}, spec), {}, {\n                left: targetLeft\n            });\n            var trackStyle = (0, _innerSliderUtils.getTrackCSS)(spec);\n            if (setTrackStyle || _react[\"default\"].Children.count(_this.props.children) !== _react[\"default\"].Children.count(spec.children)) {\n                updatedState[\"trackStyle\"] = trackStyle;\n            }\n            _this.setState(updatedState, callback);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ssrInit\", function() {\n            if (_this.props.variableWidth) {\n                var _trackWidth = 0, _trackLeft = 0;\n                var childrenWidths = [];\n                var preClones = (0, _innerSliderUtils.getPreClones)(_objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {\n                    slideCount: _this.props.children.length\n                }));\n                var postClones = (0, _innerSliderUtils.getPostClones)(_objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {\n                    slideCount: _this.props.children.length\n                }));\n                _this.props.children.forEach(function(child) {\n                    childrenWidths.push(child.props.style.width);\n                    _trackWidth += child.props.style.width;\n                });\n                for(var i = 0; i < preClones; i++){\n                    _trackLeft += childrenWidths[childrenWidths.length - 1 - i];\n                    _trackWidth += childrenWidths[childrenWidths.length - 1 - i];\n                }\n                for(var _i = 0; _i < postClones; _i++){\n                    _trackWidth += childrenWidths[_i];\n                }\n                for(var _i2 = 0; _i2 < _this.state.currentSlide; _i2++){\n                    _trackLeft += childrenWidths[_i2];\n                }\n                var _trackStyle = {\n                    width: _trackWidth + \"px\",\n                    left: -_trackLeft + \"px\"\n                };\n                if (_this.props.centerMode) {\n                    var currentWidth = \"\".concat(childrenWidths[_this.state.currentSlide], \"px\");\n                    _trackStyle.left = \"calc(\".concat(_trackStyle.left, \" + (100% - \").concat(currentWidth, \") / 2 ) \");\n                }\n                return {\n                    trackStyle: _trackStyle\n                };\n            }\n            var childrenCount = _react[\"default\"].Children.count(_this.props.children);\n            var spec = _objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {\n                slideCount: childrenCount\n            });\n            var slideCount = (0, _innerSliderUtils.getPreClones)(spec) + (0, _innerSliderUtils.getPostClones)(spec) + childrenCount;\n            var trackWidth = 100 / _this.props.slidesToShow * slideCount;\n            var slideWidth = 100 / slideCount;\n            var trackLeft = -slideWidth * ((0, _innerSliderUtils.getPreClones)(spec) + _this.state.currentSlide) * trackWidth / 100;\n            if (_this.props.centerMode) {\n                trackLeft += (100 - slideWidth * trackWidth / 100) / 2;\n            }\n            var trackStyle = {\n                width: trackWidth + \"%\",\n                left: trackLeft + \"%\"\n            };\n            return {\n                slideWidth: slideWidth + \"%\",\n                trackStyle: trackStyle\n            };\n        });\n        _defineProperty(_assertThisInitialized(_this), \"checkImagesLoad\", function() {\n            var images = _this.list && _this.list.querySelectorAll && _this.list.querySelectorAll(\".slick-slide img\") || [];\n            var imagesCount = images.length, loadedCount = 0;\n            Array.prototype.forEach.call(images, function(image) {\n                var handler = function handler() {\n                    return ++loadedCount && loadedCount >= imagesCount && _this.onWindowResized();\n                };\n                if (!image.onclick) {\n                    image.onclick = function() {\n                        return image.parentNode.focus();\n                    };\n                } else {\n                    var prevClickHandler = image.onclick;\n                    image.onclick = function() {\n                        prevClickHandler();\n                        image.parentNode.focus();\n                    };\n                }\n                if (!image.onload) {\n                    if (_this.props.lazyLoad) {\n                        image.onload = function() {\n                            _this.adaptHeight();\n                            _this.callbackTimers.push(setTimeout(_this.onWindowResized, _this.props.speed));\n                        };\n                    } else {\n                        image.onload = handler;\n                        image.onerror = function() {\n                            handler();\n                            _this.props.onLazyLoadError && _this.props.onLazyLoadError();\n                        };\n                    }\n                }\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"progressiveLazyLoad\", function() {\n            var slidesToLoad = [];\n            var spec = _objectSpread(_objectSpread({}, _this.props), _this.state);\n            for(var index = _this.state.currentSlide; index < _this.state.slideCount + (0, _innerSliderUtils.getPostClones)(spec); index++){\n                if (_this.state.lazyLoadedList.indexOf(index) < 0) {\n                    slidesToLoad.push(index);\n                    break;\n                }\n            }\n            for(var _index = _this.state.currentSlide - 1; _index >= -(0, _innerSliderUtils.getPreClones)(spec); _index--){\n                if (_this.state.lazyLoadedList.indexOf(_index) < 0) {\n                    slidesToLoad.push(_index);\n                    break;\n                }\n            }\n            if (slidesToLoad.length > 0) {\n                _this.setState(function(state) {\n                    return {\n                        lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad)\n                    };\n                });\n                if (_this.props.onLazyLoad) {\n                    _this.props.onLazyLoad(slidesToLoad);\n                }\n            } else {\n                if (_this.lazyLoadTimer) {\n                    clearInterval(_this.lazyLoadTimer);\n                    delete _this.lazyLoadTimer;\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slideHandler\", function(index) {\n            var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var _this$props = _this.props, asNavFor = _this$props.asNavFor, beforeChange = _this$props.beforeChange, onLazyLoad = _this$props.onLazyLoad, speed = _this$props.speed, afterChange = _this$props.afterChange; // capture currentslide before state is updated\n            var currentSlide = _this.state.currentSlide;\n            var _slideHandler = (0, _innerSliderUtils.slideHandler)(_objectSpread(_objectSpread(_objectSpread({\n                index: index\n            }, _this.props), _this.state), {}, {\n                trackRef: _this.track,\n                useCSS: _this.props.useCSS && !dontAnimate\n            })), state = _slideHandler.state, nextState = _slideHandler.nextState;\n            if (!state) return;\n            beforeChange && beforeChange(currentSlide, state.currentSlide);\n            var slidesToLoad = state.lazyLoadedList.filter(function(value) {\n                return _this.state.lazyLoadedList.indexOf(value) < 0;\n            });\n            onLazyLoad && slidesToLoad.length > 0 && onLazyLoad(slidesToLoad);\n            if (!_this.props.waitForAnimate && _this.animationEndCallback) {\n                clearTimeout(_this.animationEndCallback);\n                afterChange && afterChange(currentSlide);\n                delete _this.animationEndCallback;\n            }\n            _this.setState(state, function() {\n                // asNavForIndex check is to avoid recursive calls of slideHandler in waitForAnimate=false mode\n                if (asNavFor && _this.asNavForIndex !== index) {\n                    _this.asNavForIndex = index;\n                    asNavFor.innerSlider.slideHandler(index);\n                }\n                if (!nextState) return;\n                _this.animationEndCallback = setTimeout(function() {\n                    var animating = nextState.animating, firstBatch = _objectWithoutProperties(nextState, [\n                        \"animating\"\n                    ]);\n                    _this.setState(firstBatch, function() {\n                        _this.callbackTimers.push(setTimeout(function() {\n                            return _this.setState({\n                                animating: animating\n                            });\n                        }, 10));\n                        afterChange && afterChange(state.currentSlide);\n                        delete _this.animationEndCallback;\n                    });\n                }, speed);\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"changeSlide\", function(options) {\n            var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var spec = _objectSpread(_objectSpread({}, _this.props), _this.state);\n            var targetSlide = (0, _innerSliderUtils.changeSlide)(spec, options);\n            if (targetSlide !== 0 && !targetSlide) return;\n            if (dontAnimate === true) {\n                _this.slideHandler(targetSlide, dontAnimate);\n            } else {\n                _this.slideHandler(targetSlide);\n            }\n            _this.props.autoplay && _this.autoPlay(\"update\");\n            if (_this.props.focusOnSelect) {\n                var nodes = _this.list.querySelectorAll(\".slick-current\");\n                nodes[0] && nodes[0].focus();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"clickHandler\", function(e) {\n            if (_this.clickable === false) {\n                e.stopPropagation();\n                e.preventDefault();\n            }\n            _this.clickable = true;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"keyHandler\", function(e) {\n            var dir = (0, _innerSliderUtils.keyHandler)(e, _this.props.accessibility, _this.props.rtl);\n            dir !== \"\" && _this.changeSlide({\n                message: dir\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"selectHandler\", function(options) {\n            _this.changeSlide(options);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"disableBodyScroll\", function() {\n            var preventDefault = function preventDefault(e) {\n                e = e || window.event;\n                if (e.preventDefault) e.preventDefault();\n                e.returnValue = false;\n            };\n            window.ontouchmove = preventDefault;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"enableBodyScroll\", function() {\n            window.ontouchmove = null;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"swipeStart\", function(e) {\n            if (_this.props.verticalSwiping) {\n                _this.disableBodyScroll();\n            }\n            var state = (0, _innerSliderUtils.swipeStart)(e, _this.props.swipe, _this.props.draggable);\n            state !== \"\" && _this.setState(state);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"swipeMove\", function(e) {\n            var state = (0, _innerSliderUtils.swipeMove)(e, _objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {\n                trackRef: _this.track,\n                listRef: _this.list,\n                slideIndex: _this.state.currentSlide\n            }));\n            if (!state) return;\n            if (state[\"swiping\"]) {\n                _this.clickable = false;\n            }\n            _this.setState(state);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"swipeEnd\", function(e) {\n            var state = (0, _innerSliderUtils.swipeEnd)(e, _objectSpread(_objectSpread(_objectSpread({}, _this.props), _this.state), {}, {\n                trackRef: _this.track,\n                listRef: _this.list,\n                slideIndex: _this.state.currentSlide\n            }));\n            if (!state) return;\n            var triggerSlideHandler = state[\"triggerSlideHandler\"];\n            delete state[\"triggerSlideHandler\"];\n            _this.setState(state);\n            if (triggerSlideHandler === undefined) return;\n            _this.slideHandler(triggerSlideHandler);\n            if (_this.props.verticalSwiping) {\n                _this.enableBodyScroll();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"touchEnd\", function(e) {\n            _this.swipeEnd(e);\n            _this.clickable = true;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slickPrev\", function() {\n            // this and fellow methods are wrapped in setTimeout\n            // to make sure initialize setState has happened before\n            // any of such methods are called\n            _this.callbackTimers.push(setTimeout(function() {\n                return _this.changeSlide({\n                    message: \"previous\"\n                });\n            }, 0));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slickNext\", function() {\n            _this.callbackTimers.push(setTimeout(function() {\n                return _this.changeSlide({\n                    message: \"next\"\n                });\n            }, 0));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slickGoTo\", function(slide) {\n            var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            slide = Number(slide);\n            if (isNaN(slide)) return \"\";\n            _this.callbackTimers.push(setTimeout(function() {\n                return _this.changeSlide({\n                    message: \"index\",\n                    index: slide,\n                    currentSlide: _this.state.currentSlide\n                }, dontAnimate);\n            }, 0));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"play\", function() {\n            var nextIndex;\n            if (_this.props.rtl) {\n                nextIndex = _this.state.currentSlide - _this.props.slidesToScroll;\n            } else {\n                if ((0, _innerSliderUtils.canGoNext)(_objectSpread(_objectSpread({}, _this.props), _this.state))) {\n                    nextIndex = _this.state.currentSlide + _this.props.slidesToScroll;\n                } else {\n                    return false;\n                }\n            }\n            _this.slideHandler(nextIndex);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"autoPlay\", function(playType) {\n            if (_this.autoplayTimer) {\n                clearInterval(_this.autoplayTimer);\n            }\n            var autoplaying = _this.state.autoplaying;\n            if (playType === \"update\") {\n                if (autoplaying === \"hovered\" || autoplaying === \"focused\" || autoplaying === \"paused\") {\n                    return;\n                }\n            } else if (playType === \"leave\") {\n                if (autoplaying === \"paused\" || autoplaying === \"focused\") {\n                    return;\n                }\n            } else if (playType === \"blur\") {\n                if (autoplaying === \"paused\" || autoplaying === \"hovered\") {\n                    return;\n                }\n            }\n            _this.autoplayTimer = setInterval(_this.play, _this.props.autoplaySpeed + 50);\n            _this.setState({\n                autoplaying: \"playing\"\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"pause\", function(pauseType) {\n            if (_this.autoplayTimer) {\n                clearInterval(_this.autoplayTimer);\n                _this.autoplayTimer = null;\n            }\n            var autoplaying = _this.state.autoplaying;\n            if (pauseType === \"paused\") {\n                _this.setState({\n                    autoplaying: \"paused\"\n                });\n            } else if (pauseType === \"focused\") {\n                if (autoplaying === \"hovered\" || autoplaying === \"playing\") {\n                    _this.setState({\n                        autoplaying: \"focused\"\n                    });\n                }\n            } else {\n                // pauseType  is 'hovered'\n                if (autoplaying === \"playing\") {\n                    _this.setState({\n                        autoplaying: \"hovered\"\n                    });\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDotsOver\", function() {\n            return _this.props.autoplay && _this.pause(\"hovered\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDotsLeave\", function() {\n            return _this.props.autoplay && _this.state.autoplaying === \"hovered\" && _this.autoPlay(\"leave\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onTrackOver\", function() {\n            return _this.props.autoplay && _this.pause(\"hovered\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onTrackLeave\", function() {\n            return _this.props.autoplay && _this.state.autoplaying === \"hovered\" && _this.autoPlay(\"leave\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSlideFocus\", function() {\n            return _this.props.autoplay && _this.pause(\"focused\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSlideBlur\", function() {\n            return _this.props.autoplay && _this.state.autoplaying === \"focused\" && _this.autoPlay(\"blur\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"render\", function() {\n            var className = (0, _classnames[\"default\"])(\"slick-slider\", _this.props.className, {\n                \"slick-vertical\": _this.props.vertical,\n                \"slick-initialized\": true\n            });\n            var spec = _objectSpread(_objectSpread({}, _this.props), _this.state);\n            var trackProps = (0, _innerSliderUtils.extractObject)(spec, [\n                \"fade\",\n                \"cssEase\",\n                \"speed\",\n                \"infinite\",\n                \"centerMode\",\n                \"focusOnSelect\",\n                \"currentSlide\",\n                \"lazyLoad\",\n                \"lazyLoadedList\",\n                \"rtl\",\n                \"slideWidth\",\n                \"slideHeight\",\n                \"listHeight\",\n                \"vertical\",\n                \"slidesToShow\",\n                \"slidesToScroll\",\n                \"slideCount\",\n                \"trackStyle\",\n                \"variableWidth\",\n                \"unslick\",\n                \"centerPadding\",\n                \"targetSlide\",\n                \"useCSS\"\n            ]);\n            var pauseOnHover = _this.props.pauseOnHover;\n            trackProps = _objectSpread(_objectSpread({}, trackProps), {}, {\n                onMouseEnter: pauseOnHover ? _this.onTrackOver : null,\n                onMouseLeave: pauseOnHover ? _this.onTrackLeave : null,\n                onMouseOver: pauseOnHover ? _this.onTrackOver : null,\n                focusOnSelect: _this.props.focusOnSelect && _this.clickable ? _this.selectHandler : null\n            });\n            var dots;\n            if (_this.props.dots === true && _this.state.slideCount >= _this.props.slidesToShow) {\n                var dotProps = (0, _innerSliderUtils.extractObject)(spec, [\n                    \"dotsClass\",\n                    \"slideCount\",\n                    \"slidesToShow\",\n                    \"currentSlide\",\n                    \"slidesToScroll\",\n                    \"clickHandler\",\n                    \"children\",\n                    \"customPaging\",\n                    \"infinite\",\n                    \"appendDots\"\n                ]);\n                var pauseOnDotsHover = _this.props.pauseOnDotsHover;\n                dotProps = _objectSpread(_objectSpread({}, dotProps), {}, {\n                    clickHandler: _this.changeSlide,\n                    onMouseEnter: pauseOnDotsHover ? _this.onDotsLeave : null,\n                    onMouseOver: pauseOnDotsHover ? _this.onDotsOver : null,\n                    onMouseLeave: pauseOnDotsHover ? _this.onDotsLeave : null\n                });\n                dots = /*#__PURE__*/ _react[\"default\"].createElement(_dots.Dots, dotProps);\n            }\n            var prevArrow, nextArrow;\n            var arrowProps = (0, _innerSliderUtils.extractObject)(spec, [\n                \"infinite\",\n                \"centerMode\",\n                \"currentSlide\",\n                \"slideCount\",\n                \"slidesToShow\",\n                \"prevArrow\",\n                \"nextArrow\"\n            ]);\n            arrowProps.clickHandler = _this.changeSlide;\n            if (_this.props.arrows) {\n                prevArrow = /*#__PURE__*/ _react[\"default\"].createElement(_arrows.PrevArrow, arrowProps);\n                nextArrow = /*#__PURE__*/ _react[\"default\"].createElement(_arrows.NextArrow, arrowProps);\n            }\n            var verticalHeightStyle = null;\n            if (_this.props.vertical) {\n                verticalHeightStyle = {\n                    height: _this.state.listHeight\n                };\n            }\n            var centerPaddingStyle = null;\n            if (_this.props.vertical === false) {\n                if (_this.props.centerMode === true) {\n                    centerPaddingStyle = {\n                        padding: \"0px \" + _this.props.centerPadding\n                    };\n                }\n            } else {\n                if (_this.props.centerMode === true) {\n                    centerPaddingStyle = {\n                        padding: _this.props.centerPadding + \" 0px\"\n                    };\n                }\n            }\n            var listStyle = _objectSpread(_objectSpread({}, verticalHeightStyle), centerPaddingStyle);\n            var touchMove = _this.props.touchMove;\n            var listProps = {\n                className: \"slick-list\",\n                style: listStyle,\n                onClick: _this.clickHandler,\n                onMouseDown: touchMove ? _this.swipeStart : null,\n                onMouseMove: _this.state.dragging && touchMove ? _this.swipeMove : null,\n                onMouseUp: touchMove ? _this.swipeEnd : null,\n                onMouseLeave: _this.state.dragging && touchMove ? _this.swipeEnd : null,\n                onTouchStart: touchMove ? _this.swipeStart : null,\n                onTouchMove: _this.state.dragging && touchMove ? _this.swipeMove : null,\n                onTouchEnd: touchMove ? _this.touchEnd : null,\n                onTouchCancel: _this.state.dragging && touchMove ? _this.swipeEnd : null,\n                onKeyDown: _this.props.accessibility ? _this.keyHandler : null\n            };\n            var innerSliderProps = {\n                className: className,\n                dir: \"ltr\",\n                style: _this.props.style\n            };\n            if (_this.props.unslick) {\n                listProps = {\n                    className: \"slick-list\"\n                };\n                innerSliderProps = {\n                    className: className\n                };\n            }\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", innerSliderProps, !_this.props.unslick ? prevArrow : \"\", /*#__PURE__*/ _react[\"default\"].createElement(\"div\", _extends({\n                ref: _this.listRefHandler\n            }, listProps), /*#__PURE__*/ _react[\"default\"].createElement(_track.Track, _extends({\n                ref: _this.trackRefHandler\n            }, trackProps), _this.props.children)), !_this.props.unslick ? nextArrow : \"\", !_this.props.unslick ? dots : \"\");\n        });\n        _this.list = null;\n        _this.track = null;\n        _this.state = _objectSpread(_objectSpread({}, _initialState[\"default\"]), {}, {\n            currentSlide: _this.props.initialSlide,\n            slideCount: _react[\"default\"].Children.count(_this.props.children)\n        });\n        _this.callbackTimers = [];\n        _this.clickable = true;\n        _this.debouncedResize = null;\n        var ssrState = _this.ssrInit();\n        _this.state = _objectSpread(_objectSpread({}, _this.state), ssrState);\n        return _this;\n    }\n    _createClass(InnerSlider, [\n        {\n            key: \"didPropsChange\",\n            value: function didPropsChange(prevProps) {\n                var setTrackStyle = false;\n                for(var _i3 = 0, _Object$keys = Object.keys(this.props); _i3 < _Object$keys.length; _i3++){\n                    var key = _Object$keys[_i3];\n                    if (!prevProps.hasOwnProperty(key)) {\n                        setTrackStyle = true;\n                        break;\n                    }\n                    if (_typeof(prevProps[key]) === \"object\" || typeof prevProps[key] === \"function\") {\n                        continue;\n                    }\n                    if (prevProps[key] !== this.props[key]) {\n                        setTrackStyle = true;\n                        break;\n                    }\n                }\n                return setTrackStyle || _react[\"default\"].Children.count(this.props.children) !== _react[\"default\"].Children.count(prevProps.children);\n            }\n        }\n    ]);\n    return InnerSlider;\n}(_react[\"default\"].Component);\nexports.InnerSlider = InnerSlider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/inner-slider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/slider.js":
/*!************************************************!*\
  !*** ./node_modules/react-slick/lib/slider.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _innerSlider = __webpack_require__(/*! ./inner-slider */ \"(ssr)/./node_modules/react-slick/lib/inner-slider.js\");\nvar _json2mq = _interopRequireDefault(__webpack_require__(/*! json2mq */ \"(ssr)/./node_modules/json2mq/index.js\"));\nvar _defaultProps = _interopRequireDefault(__webpack_require__(/*! ./default-props */ \"(ssr)/./node_modules/react-slick/lib/default-props.js\"));\nvar _innerSliderUtils = __webpack_require__(/*! ./utils/innerSliderUtils */ \"(ssr)/./node_modules/react-slick/lib/utils/innerSliderUtils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar enquire = (0, _innerSliderUtils.canUseDOM)() && __webpack_require__(/*! enquire.js */ \"(ssr)/./node_modules/enquire.js/src/index.js\");\nvar Slider = /*#__PURE__*/ function(_React$Component) {\n    _inherits(Slider, _React$Component);\n    var _super = _createSuper(Slider);\n    function Slider(props) {\n        var _this;\n        _classCallCheck(this, Slider);\n        _this = _super.call(this, props);\n        _defineProperty(_assertThisInitialized(_this), \"innerSliderRefHandler\", function(ref) {\n            return _this.innerSlider = ref;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slickPrev\", function() {\n            return _this.innerSlider.slickPrev();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slickNext\", function() {\n            return _this.innerSlider.slickNext();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slickGoTo\", function(slide) {\n            var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            return _this.innerSlider.slickGoTo(slide, dontAnimate);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slickPause\", function() {\n            return _this.innerSlider.pause(\"paused\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"slickPlay\", function() {\n            return _this.innerSlider.autoPlay(\"play\");\n        });\n        _this.state = {\n            breakpoint: null\n        };\n        _this._responsiveMediaHandlers = [];\n        return _this;\n    }\n    _createClass(Slider, [\n        {\n            key: \"media\",\n            value: function media(query, handler) {\n                // javascript handler for  css media query\n                enquire.register(query, handler);\n                this._responsiveMediaHandlers.push({\n                    query: query,\n                    handler: handler\n                });\n            } // handles responsive breakpoints\n        },\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                var _this2 = this;\n                // performance monitoring\n                //if (process.env.NODE_ENV !== 'production') {\n                //const { whyDidYouUpdate } = require('why-did-you-update')\n                //whyDidYouUpdate(React)\n                //}\n                if (this.props.responsive) {\n                    var breakpoints = this.props.responsive.map(function(breakpt) {\n                        return breakpt.breakpoint;\n                    }); // sort them in increasing order of their numerical value\n                    breakpoints.sort(function(x, y) {\n                        return x - y;\n                    });\n                    breakpoints.forEach(function(breakpoint, index) {\n                        // media query for each breakpoint\n                        var bQuery;\n                        if (index === 0) {\n                            bQuery = (0, _json2mq[\"default\"])({\n                                minWidth: 0,\n                                maxWidth: breakpoint\n                            });\n                        } else {\n                            bQuery = (0, _json2mq[\"default\"])({\n                                minWidth: breakpoints[index - 1] + 1,\n                                maxWidth: breakpoint\n                            });\n                        } // when not using server side rendering\n                        (0, _innerSliderUtils.canUseDOM)() && _this2.media(bQuery, function() {\n                            _this2.setState({\n                                breakpoint: breakpoint\n                            });\n                        });\n                    }); // Register media query for full screen. Need to support resize from small to large\n                    // convert javascript object to media query string\n                    var query = (0, _json2mq[\"default\"])({\n                        minWidth: breakpoints.slice(-1)[0]\n                    });\n                    (0, _innerSliderUtils.canUseDOM)() && this.media(query, function() {\n                        _this2.setState({\n                            breakpoint: null\n                        });\n                    });\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this._responsiveMediaHandlers.forEach(function(obj) {\n                    enquire.unregister(obj.query, obj.handler);\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this3 = this;\n                var settings;\n                var newProps;\n                if (this.state.breakpoint) {\n                    newProps = this.props.responsive.filter(function(resp) {\n                        return resp.breakpoint === _this3.state.breakpoint;\n                    });\n                    settings = newProps[0].settings === \"unslick\" ? \"unslick\" : _objectSpread(_objectSpread(_objectSpread({}, _defaultProps[\"default\"]), this.props), newProps[0].settings);\n                } else {\n                    settings = _objectSpread(_objectSpread({}, _defaultProps[\"default\"]), this.props);\n                } // force scrolling by one if centerMode is on\n                if (settings.centerMode) {\n                    if (settings.slidesToScroll > 1 && \"development\" !== \"production\") {\n                        console.warn(\"slidesToScroll should be equal to 1 in centerMode, you are using \".concat(settings.slidesToScroll));\n                    }\n                    settings.slidesToScroll = 1;\n                } // force showing one slide and scrolling by one if the fade mode is on\n                if (settings.fade) {\n                    if (settings.slidesToShow > 1 && \"development\" !== \"production\") {\n                        console.warn(\"slidesToShow should be equal to 1 when fade is true, you're using \".concat(settings.slidesToShow));\n                    }\n                    if (settings.slidesToScroll > 1 && \"development\" !== \"production\") {\n                        console.warn(\"slidesToScroll should be equal to 1 when fade is true, you're using \".concat(settings.slidesToScroll));\n                    }\n                    settings.slidesToShow = 1;\n                    settings.slidesToScroll = 1;\n                } // makes sure that children is an array, even when there is only 1 child\n                var children = _react[\"default\"].Children.toArray(this.props.children); // Children may contain false or null, so we should filter them\n                // children may also contain string filled with spaces (in certain cases where we use jsx strings)\n                children = children.filter(function(child) {\n                    if (typeof child === \"string\") {\n                        return !!child.trim();\n                    }\n                    return !!child;\n                }); // rows and slidesPerRow logic is handled here\n                if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {\n                    console.warn(\"variableWidth is not supported in case of rows > 1 or slidesPerRow > 1\");\n                    settings.variableWidth = false;\n                }\n                var newChildren = [];\n                var currentWidth = null;\n                for(var i = 0; i < children.length; i += settings.rows * settings.slidesPerRow){\n                    var newSlide = [];\n                    for(var j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow){\n                        var row = [];\n                        for(var k = j; k < j + settings.slidesPerRow; k += 1){\n                            if (settings.variableWidth && children[k].props.style) {\n                                currentWidth = children[k].props.style.width;\n                            }\n                            if (k >= children.length) break;\n                            row.push(/*#__PURE__*/ _react[\"default\"].cloneElement(children[k], {\n                                key: 100 * i + 10 * j + k,\n                                tabIndex: -1,\n                                style: {\n                                    width: \"\".concat(100 / settings.slidesPerRow, \"%\"),\n                                    display: \"inline-block\"\n                                }\n                            }));\n                        }\n                        newSlide.push(/*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                            key: 10 * i + j\n                        }, row));\n                    }\n                    if (settings.variableWidth) {\n                        newChildren.push(/*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                            key: i,\n                            style: {\n                                width: currentWidth\n                            }\n                        }, newSlide));\n                    } else {\n                        newChildren.push(/*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                            key: i\n                        }, newSlide));\n                    }\n                }\n                if (settings === \"unslick\") {\n                    var className = \"regular slider \" + (this.props.className || \"\");\n                    return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                        className: className\n                    }, children);\n                } else if (newChildren.length <= settings.slidesToShow) {\n                    settings.unslick = true;\n                }\n                return /*#__PURE__*/ _react[\"default\"].createElement(_innerSlider.InnerSlider, _extends({\n                    style: this.props.style,\n                    ref: this.innerSliderRefHandler\n                }, settings), newChildren);\n            }\n        }\n    ]);\n    return Slider;\n}(_react[\"default\"].Component);\nexports[\"default\"] = Slider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/slider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/track.js":
/*!***********************************************!*\
  !*** ./node_modules/react-slick/lib/track.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Track = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _innerSliderUtils = __webpack_require__(/*! ./utils/innerSliderUtils */ \"(ssr)/./node_modules/react-slick/lib/utils/innerSliderUtils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n// given specifications/props for a slide, fetch all the classes that need to be applied to the slide\nvar getSlideClasses = function getSlideClasses(spec) {\n    var slickActive, slickCenter, slickCloned;\n    var centerOffset, index;\n    if (spec.rtl) {\n        index = spec.slideCount - 1 - spec.index;\n    } else {\n        index = spec.index;\n    }\n    slickCloned = index < 0 || index >= spec.slideCount;\n    if (spec.centerMode) {\n        centerOffset = Math.floor(spec.slidesToShow / 2);\n        slickCenter = (index - spec.currentSlide) % spec.slideCount === 0;\n        if (index > spec.currentSlide - centerOffset - 1 && index <= spec.currentSlide + centerOffset) {\n            slickActive = true;\n        }\n    } else {\n        slickActive = spec.currentSlide <= index && index < spec.currentSlide + spec.slidesToShow;\n    }\n    var focusedSlide;\n    if (spec.targetSlide < 0) {\n        focusedSlide = spec.targetSlide + spec.slideCount;\n    } else if (spec.targetSlide >= spec.slideCount) {\n        focusedSlide = spec.targetSlide - spec.slideCount;\n    } else {\n        focusedSlide = spec.targetSlide;\n    }\n    var slickCurrent = index === focusedSlide;\n    return {\n        \"slick-slide\": true,\n        \"slick-active\": slickActive,\n        \"slick-center\": slickCenter,\n        \"slick-cloned\": slickCloned,\n        \"slick-current\": slickCurrent // dubious in case of RTL\n    };\n};\nvar getSlideStyle = function getSlideStyle(spec) {\n    var style = {};\n    if (spec.variableWidth === undefined || spec.variableWidth === false) {\n        style.width = spec.slideWidth;\n    }\n    if (spec.fade) {\n        style.position = \"relative\";\n        if (spec.vertical) {\n            style.top = -spec.index * parseInt(spec.slideHeight);\n        } else {\n            style.left = -spec.index * parseInt(spec.slideWidth);\n        }\n        style.opacity = spec.currentSlide === spec.index ? 1 : 0;\n        if (spec.useCSS) {\n            style.transition = \"opacity \" + spec.speed + \"ms \" + spec.cssEase + \", \" + \"visibility \" + spec.speed + \"ms \" + spec.cssEase;\n        }\n    }\n    return style;\n};\nvar getKey = function getKey(child, fallbackKey) {\n    return child.key || fallbackKey;\n};\nvar renderSlides = function renderSlides(spec) {\n    var key;\n    var slides = [];\n    var preCloneSlides = [];\n    var postCloneSlides = [];\n    var childrenCount = _react[\"default\"].Children.count(spec.children);\n    var startIndex = (0, _innerSliderUtils.lazyStartIndex)(spec);\n    var endIndex = (0, _innerSliderUtils.lazyEndIndex)(spec);\n    _react[\"default\"].Children.forEach(spec.children, function(elem, index) {\n        var child;\n        var childOnClickOptions = {\n            message: \"children\",\n            index: index,\n            slidesToScroll: spec.slidesToScroll,\n            currentSlide: spec.currentSlide\n        }; // in case of lazyLoad, whether or not we want to fetch the slide\n        if (!spec.lazyLoad || spec.lazyLoad && spec.lazyLoadedList.indexOf(index) >= 0) {\n            child = elem;\n        } else {\n            child = /*#__PURE__*/ _react[\"default\"].createElement(\"div\", null);\n        }\n        var childStyle = getSlideStyle(_objectSpread(_objectSpread({}, spec), {}, {\n            index: index\n        }));\n        var slideClass = child.props.className || \"\";\n        var slideClasses = getSlideClasses(_objectSpread(_objectSpread({}, spec), {}, {\n            index: index\n        })); // push a cloned element of the desired slide\n        slides.push(/*#__PURE__*/ _react[\"default\"].cloneElement(child, {\n            key: \"original\" + getKey(child, index),\n            \"data-index\": index,\n            className: (0, _classnames[\"default\"])(slideClasses, slideClass),\n            tabIndex: \"-1\",\n            \"aria-hidden\": !slideClasses[\"slick-active\"],\n            style: _objectSpread(_objectSpread({\n                outline: \"none\"\n            }, child.props.style || {}), childStyle),\n            onClick: function onClick(e) {\n                child.props && child.props.onClick && child.props.onClick(e);\n                if (spec.focusOnSelect) {\n                    spec.focusOnSelect(childOnClickOptions);\n                }\n            }\n        })); // if slide needs to be precloned or postcloned\n        if (spec.infinite && spec.fade === false) {\n            var preCloneNo = childrenCount - index;\n            if (preCloneNo <= (0, _innerSliderUtils.getPreClones)(spec) && childrenCount !== spec.slidesToShow) {\n                key = -preCloneNo;\n                if (key >= startIndex) {\n                    child = elem;\n                }\n                slideClasses = getSlideClasses(_objectSpread(_objectSpread({}, spec), {}, {\n                    index: key\n                }));\n                preCloneSlides.push(/*#__PURE__*/ _react[\"default\"].cloneElement(child, {\n                    key: \"precloned\" + getKey(child, key),\n                    \"data-index\": key,\n                    tabIndex: \"-1\",\n                    className: (0, _classnames[\"default\"])(slideClasses, slideClass),\n                    \"aria-hidden\": !slideClasses[\"slick-active\"],\n                    style: _objectSpread(_objectSpread({}, child.props.style || {}), childStyle),\n                    onClick: function onClick(e) {\n                        child.props && child.props.onClick && child.props.onClick(e);\n                        if (spec.focusOnSelect) {\n                            spec.focusOnSelect(childOnClickOptions);\n                        }\n                    }\n                }));\n            }\n            if (childrenCount !== spec.slidesToShow) {\n                key = childrenCount + index;\n                if (key < endIndex) {\n                    child = elem;\n                }\n                slideClasses = getSlideClasses(_objectSpread(_objectSpread({}, spec), {}, {\n                    index: key\n                }));\n                postCloneSlides.push(/*#__PURE__*/ _react[\"default\"].cloneElement(child, {\n                    key: \"postcloned\" + getKey(child, key),\n                    \"data-index\": key,\n                    tabIndex: \"-1\",\n                    className: (0, _classnames[\"default\"])(slideClasses, slideClass),\n                    \"aria-hidden\": !slideClasses[\"slick-active\"],\n                    style: _objectSpread(_objectSpread({}, child.props.style || {}), childStyle),\n                    onClick: function onClick(e) {\n                        child.props && child.props.onClick && child.props.onClick(e);\n                        if (spec.focusOnSelect) {\n                            spec.focusOnSelect(childOnClickOptions);\n                        }\n                    }\n                }));\n            }\n        }\n    });\n    if (spec.rtl) {\n        return preCloneSlides.concat(slides, postCloneSlides).reverse();\n    } else {\n        return preCloneSlides.concat(slides, postCloneSlides);\n    }\n};\nvar Track = /*#__PURE__*/ function(_React$PureComponent) {\n    _inherits(Track, _React$PureComponent);\n    var _super = _createSuper(Track);\n    function Track() {\n        var _this;\n        _classCallCheck(this, Track);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"node\", null);\n        _defineProperty(_assertThisInitialized(_this), \"handleRef\", function(ref) {\n            _this.node = ref;\n        });\n        return _this;\n    }\n    _createClass(Track, [\n        {\n            key: \"render\",\n            value: function render() {\n                var slides = renderSlides(this.props);\n                var _this$props = this.props, onMouseEnter = _this$props.onMouseEnter, onMouseOver = _this$props.onMouseOver, onMouseLeave = _this$props.onMouseLeave;\n                var mouseEvents = {\n                    onMouseEnter: onMouseEnter,\n                    onMouseOver: onMouseOver,\n                    onMouseLeave: onMouseLeave\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", _extends({\n                    ref: this.handleRef,\n                    className: \"slick-track\",\n                    style: this.props.trackStyle\n                }, mouseEvents), slides);\n            }\n        }\n    ]);\n    return Track;\n}(_react[\"default\"].PureComponent);\nexports.Track = Track;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/track.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-slick/lib/utils/innerSliderUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-slick/lib/utils/innerSliderUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checkSpecKeys = exports.checkNavigable = exports.changeSlide = exports.canUseDOM = exports.canGoNext = void 0;\nexports.clamp = clamp;\nexports.swipeStart = exports.swipeMove = exports.swipeEnd = exports.slidesOnRight = exports.slidesOnLeft = exports.slideHandler = exports.siblingDirection = exports.safePreventDefault = exports.lazyStartIndex = exports.lazySlidesOnRight = exports.lazySlidesOnLeft = exports.lazyEndIndex = exports.keyHandler = exports.initializedState = exports.getWidth = exports.getTrackLeft = exports.getTrackCSS = exports.getTrackAnimateCSS = exports.getTotalSlides = exports.getSwipeDirection = exports.getSlideCount = exports.getRequiredLazySlides = exports.getPreClones = exports.getPostClones = exports.getOnDemandLazySlides = exports.getNavigableIndexes = exports.getHeight = exports.extractObject = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction clamp(number, lowerBound, upperBound) {\n    return Math.max(lowerBound, Math.min(number, upperBound));\n}\nvar safePreventDefault = function safePreventDefault(event) {\n    var passiveEvents = [\n        \"onTouchStart\",\n        \"onTouchMove\",\n        \"onWheel\"\n    ];\n    if (!passiveEvents.includes(event._reactName)) {\n        event.preventDefault();\n    }\n};\nexports.safePreventDefault = safePreventDefault;\nvar getOnDemandLazySlides = function getOnDemandLazySlides(spec) {\n    var onDemandSlides = [];\n    var startIndex = lazyStartIndex(spec);\n    var endIndex = lazyEndIndex(spec);\n    for(var slideIndex = startIndex; slideIndex < endIndex; slideIndex++){\n        if (spec.lazyLoadedList.indexOf(slideIndex) < 0) {\n            onDemandSlides.push(slideIndex);\n        }\n    }\n    return onDemandSlides;\n}; // return list of slides that need to be present\nexports.getOnDemandLazySlides = getOnDemandLazySlides;\nvar getRequiredLazySlides = function getRequiredLazySlides(spec) {\n    var requiredSlides = [];\n    var startIndex = lazyStartIndex(spec);\n    var endIndex = lazyEndIndex(spec);\n    for(var slideIndex = startIndex; slideIndex < endIndex; slideIndex++){\n        requiredSlides.push(slideIndex);\n    }\n    return requiredSlides;\n}; // startIndex that needs to be present\nexports.getRequiredLazySlides = getRequiredLazySlides;\nvar lazyStartIndex = function lazyStartIndex(spec) {\n    return spec.currentSlide - lazySlidesOnLeft(spec);\n};\nexports.lazyStartIndex = lazyStartIndex;\nvar lazyEndIndex = function lazyEndIndex(spec) {\n    return spec.currentSlide + lazySlidesOnRight(spec);\n};\nexports.lazyEndIndex = lazyEndIndex;\nvar lazySlidesOnLeft = function lazySlidesOnLeft(spec) {\n    return spec.centerMode ? Math.floor(spec.slidesToShow / 2) + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : 0;\n};\nexports.lazySlidesOnLeft = lazySlidesOnLeft;\nvar lazySlidesOnRight = function lazySlidesOnRight(spec) {\n    return spec.centerMode ? Math.floor((spec.slidesToShow - 1) / 2) + 1 + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : spec.slidesToShow;\n}; // get width of an element\nexports.lazySlidesOnRight = lazySlidesOnRight;\nvar getWidth = function getWidth(elem) {\n    return elem && elem.offsetWidth || 0;\n};\nexports.getWidth = getWidth;\nvar getHeight = function getHeight(elem) {\n    return elem && elem.offsetHeight || 0;\n};\nexports.getHeight = getHeight;\nvar getSwipeDirection = function getSwipeDirection(touchObject) {\n    var verticalSwiping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var xDist, yDist, r, swipeAngle;\n    xDist = touchObject.startX - touchObject.curX;\n    yDist = touchObject.startY - touchObject.curY;\n    r = Math.atan2(yDist, xDist);\n    swipeAngle = Math.round(r * 180 / Math.PI);\n    if (swipeAngle < 0) {\n        swipeAngle = 360 - Math.abs(swipeAngle);\n    }\n    if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {\n        return \"left\";\n    }\n    if (swipeAngle >= 135 && swipeAngle <= 225) {\n        return \"right\";\n    }\n    if (verticalSwiping === true) {\n        if (swipeAngle >= 35 && swipeAngle <= 135) {\n            return \"up\";\n        } else {\n            return \"down\";\n        }\n    }\n    return \"vertical\";\n}; // whether or not we can go next\nexports.getSwipeDirection = getSwipeDirection;\nvar canGoNext = function canGoNext(spec) {\n    var canGo = true;\n    if (!spec.infinite) {\n        if (spec.centerMode && spec.currentSlide >= spec.slideCount - 1) {\n            canGo = false;\n        } else if (spec.slideCount <= spec.slidesToShow || spec.currentSlide >= spec.slideCount - spec.slidesToShow) {\n            canGo = false;\n        }\n    }\n    return canGo;\n}; // given an object and a list of keys, return new object with given keys\nexports.canGoNext = canGoNext;\nvar extractObject = function extractObject(spec, keys) {\n    var newObject = {};\n    keys.forEach(function(key) {\n        return newObject[key] = spec[key];\n    });\n    return newObject;\n}; // get initialized state\nexports.extractObject = extractObject;\nvar initializedState = function initializedState(spec) {\n    // spec also contains listRef, trackRef\n    var slideCount = _react[\"default\"].Children.count(spec.children);\n    var listNode = spec.listRef;\n    var listWidth = Math.ceil(getWidth(listNode));\n    var trackNode = spec.trackRef && spec.trackRef.node;\n    var trackWidth = Math.ceil(getWidth(trackNode));\n    var slideWidth;\n    if (!spec.vertical) {\n        var centerPaddingAdj = spec.centerMode && parseInt(spec.centerPadding) * 2;\n        if (typeof spec.centerPadding === \"string\" && spec.centerPadding.slice(-1) === \"%\") {\n            centerPaddingAdj *= listWidth / 100;\n        }\n        slideWidth = Math.ceil((listWidth - centerPaddingAdj) / spec.slidesToShow);\n    } else {\n        slideWidth = listWidth;\n    }\n    var slideHeight = listNode && getHeight(listNode.querySelector('[data-index=\"0\"]'));\n    var listHeight = slideHeight * spec.slidesToShow;\n    var currentSlide = spec.currentSlide === undefined ? spec.initialSlide : spec.currentSlide;\n    if (spec.rtl && spec.currentSlide === undefined) {\n        currentSlide = slideCount - 1 - spec.initialSlide;\n    }\n    var lazyLoadedList = spec.lazyLoadedList || [];\n    var slidesToLoad = getOnDemandLazySlides(_objectSpread(_objectSpread({}, spec), {}, {\n        currentSlide: currentSlide,\n        lazyLoadedList: lazyLoadedList\n    }));\n    lazyLoadedList = lazyLoadedList.concat(slidesToLoad);\n    var state = {\n        slideCount: slideCount,\n        slideWidth: slideWidth,\n        listWidth: listWidth,\n        trackWidth: trackWidth,\n        currentSlide: currentSlide,\n        slideHeight: slideHeight,\n        listHeight: listHeight,\n        lazyLoadedList: lazyLoadedList\n    };\n    if (spec.autoplaying === null && spec.autoplay) {\n        state[\"autoplaying\"] = \"playing\";\n    }\n    return state;\n};\nexports.initializedState = initializedState;\nvar slideHandler = function slideHandler(spec) {\n    var waitForAnimate = spec.waitForAnimate, animating = spec.animating, fade = spec.fade, infinite = spec.infinite, index = spec.index, slideCount = spec.slideCount, lazyLoad = spec.lazyLoad, currentSlide = spec.currentSlide, centerMode = spec.centerMode, slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, useCSS = spec.useCSS;\n    var lazyLoadedList = spec.lazyLoadedList;\n    if (waitForAnimate && animating) return {};\n    var animationSlide = index, finalSlide, animationLeft, finalLeft;\n    var state = {}, nextState = {};\n    var targetSlide = infinite ? index : clamp(index, 0, slideCount - 1);\n    if (fade) {\n        if (!infinite && (index < 0 || index >= slideCount)) return {};\n        if (index < 0) {\n            animationSlide = index + slideCount;\n        } else if (index >= slideCount) {\n            animationSlide = index - slideCount;\n        }\n        if (lazyLoad && lazyLoadedList.indexOf(animationSlide) < 0) {\n            lazyLoadedList = lazyLoadedList.concat(animationSlide);\n        }\n        state = {\n            animating: true,\n            currentSlide: animationSlide,\n            lazyLoadedList: lazyLoadedList,\n            targetSlide: animationSlide\n        };\n        nextState = {\n            animating: false,\n            targetSlide: animationSlide\n        };\n    } else {\n        finalSlide = animationSlide;\n        if (animationSlide < 0) {\n            finalSlide = animationSlide + slideCount;\n            if (!infinite) finalSlide = 0;\n            else if (slideCount % slidesToScroll !== 0) finalSlide = slideCount - slideCount % slidesToScroll;\n        } else if (!canGoNext(spec) && animationSlide > currentSlide) {\n            animationSlide = finalSlide = currentSlide;\n        } else if (centerMode && animationSlide >= slideCount) {\n            animationSlide = infinite ? slideCount : slideCount - 1;\n            finalSlide = infinite ? 0 : slideCount - 1;\n        } else if (animationSlide >= slideCount) {\n            finalSlide = animationSlide - slideCount;\n            if (!infinite) finalSlide = slideCount - slidesToShow;\n            else if (slideCount % slidesToScroll !== 0) finalSlide = 0;\n        }\n        if (!infinite && animationSlide + slidesToShow >= slideCount) {\n            finalSlide = slideCount - slidesToShow;\n        }\n        animationLeft = getTrackLeft(_objectSpread(_objectSpread({}, spec), {}, {\n            slideIndex: animationSlide\n        }));\n        finalLeft = getTrackLeft(_objectSpread(_objectSpread({}, spec), {}, {\n            slideIndex: finalSlide\n        }));\n        if (!infinite) {\n            if (animationLeft === finalLeft) animationSlide = finalSlide;\n            animationLeft = finalLeft;\n        }\n        if (lazyLoad) {\n            lazyLoadedList = lazyLoadedList.concat(getOnDemandLazySlides(_objectSpread(_objectSpread({}, spec), {}, {\n                currentSlide: animationSlide\n            })));\n        }\n        if (!useCSS) {\n            state = {\n                currentSlide: finalSlide,\n                trackStyle: getTrackCSS(_objectSpread(_objectSpread({}, spec), {}, {\n                    left: finalLeft\n                })),\n                lazyLoadedList: lazyLoadedList,\n                targetSlide: targetSlide\n            };\n        } else {\n            state = {\n                animating: true,\n                currentSlide: finalSlide,\n                trackStyle: getTrackAnimateCSS(_objectSpread(_objectSpread({}, spec), {}, {\n                    left: animationLeft\n                })),\n                lazyLoadedList: lazyLoadedList,\n                targetSlide: targetSlide\n            };\n            nextState = {\n                animating: false,\n                currentSlide: finalSlide,\n                trackStyle: getTrackCSS(_objectSpread(_objectSpread({}, spec), {}, {\n                    left: finalLeft\n                })),\n                swipeLeft: null,\n                targetSlide: targetSlide\n            };\n        }\n    }\n    return {\n        state: state,\n        nextState: nextState\n    };\n};\nexports.slideHandler = slideHandler;\nvar changeSlide = function changeSlide(spec, options) {\n    var indexOffset, previousInt, slideOffset, unevenOffset, targetSlide;\n    var slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, slideCount = spec.slideCount, currentSlide = spec.currentSlide, previousTargetSlide = spec.targetSlide, lazyLoad = spec.lazyLoad, infinite = spec.infinite;\n    unevenOffset = slideCount % slidesToScroll !== 0;\n    indexOffset = unevenOffset ? 0 : (slideCount - currentSlide) % slidesToScroll;\n    if (options.message === \"previous\") {\n        slideOffset = indexOffset === 0 ? slidesToScroll : slidesToShow - indexOffset;\n        targetSlide = currentSlide - slideOffset;\n        if (lazyLoad && !infinite) {\n            previousInt = currentSlide - slideOffset;\n            targetSlide = previousInt === -1 ? slideCount - 1 : previousInt;\n        }\n        if (!infinite) {\n            targetSlide = previousTargetSlide - slidesToScroll;\n        }\n    } else if (options.message === \"next\") {\n        slideOffset = indexOffset === 0 ? slidesToScroll : indexOffset;\n        targetSlide = currentSlide + slideOffset;\n        if (lazyLoad && !infinite) {\n            targetSlide = (currentSlide + slidesToScroll) % slideCount + indexOffset;\n        }\n        if (!infinite) {\n            targetSlide = previousTargetSlide + slidesToScroll;\n        }\n    } else if (options.message === \"dots\") {\n        // Click on dots\n        targetSlide = options.index * options.slidesToScroll;\n    } else if (options.message === \"children\") {\n        // Click on the slides\n        targetSlide = options.index;\n        if (infinite) {\n            var direction = siblingDirection(_objectSpread(_objectSpread({}, spec), {}, {\n                targetSlide: targetSlide\n            }));\n            if (targetSlide > options.currentSlide && direction === \"left\") {\n                targetSlide = targetSlide - slideCount;\n            } else if (targetSlide < options.currentSlide && direction === \"right\") {\n                targetSlide = targetSlide + slideCount;\n            }\n        }\n    } else if (options.message === \"index\") {\n        targetSlide = Number(options.index);\n    }\n    return targetSlide;\n};\nexports.changeSlide = changeSlide;\nvar keyHandler = function keyHandler(e, accessibility, rtl) {\n    if (e.target.tagName.match(\"TEXTAREA|INPUT|SELECT\") || !accessibility) return \"\";\n    if (e.keyCode === 37) return rtl ? \"next\" : \"previous\";\n    if (e.keyCode === 39) return rtl ? \"previous\" : \"next\";\n    return \"\";\n};\nexports.keyHandler = keyHandler;\nvar swipeStart = function swipeStart(e, swipe, draggable) {\n    e.target.tagName === \"IMG\" && safePreventDefault(e);\n    if (!swipe || !draggable && e.type.indexOf(\"mouse\") !== -1) return \"\";\n    return {\n        dragging: true,\n        touchObject: {\n            startX: e.touches ? e.touches[0].pageX : e.clientX,\n            startY: e.touches ? e.touches[0].pageY : e.clientY,\n            curX: e.touches ? e.touches[0].pageX : e.clientX,\n            curY: e.touches ? e.touches[0].pageY : e.clientY\n        }\n    };\n};\nexports.swipeStart = swipeStart;\nvar swipeMove = function swipeMove(e, spec) {\n    // spec also contains, trackRef and slideIndex\n    var scrolling = spec.scrolling, animating = spec.animating, vertical = spec.vertical, swipeToSlide = spec.swipeToSlide, verticalSwiping = spec.verticalSwiping, rtl = spec.rtl, currentSlide = spec.currentSlide, edgeFriction = spec.edgeFriction, edgeDragged = spec.edgeDragged, onEdge = spec.onEdge, swiped = spec.swiped, swiping = spec.swiping, slideCount = spec.slideCount, slidesToScroll = spec.slidesToScroll, infinite = spec.infinite, touchObject = spec.touchObject, swipeEvent = spec.swipeEvent, listHeight = spec.listHeight, listWidth = spec.listWidth;\n    if (scrolling) return;\n    if (animating) return safePreventDefault(e);\n    if (vertical && swipeToSlide && verticalSwiping) safePreventDefault(e);\n    var swipeLeft, state = {};\n    var curLeft = getTrackLeft(spec);\n    touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;\n    touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;\n    touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));\n    var verticalSwipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));\n    if (!verticalSwiping && !swiping && verticalSwipeLength > 10) {\n        return {\n            scrolling: true\n        };\n    }\n    if (verticalSwiping) touchObject.swipeLength = verticalSwipeLength;\n    var positionOffset = (!rtl ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);\n    if (verticalSwiping) positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;\n    var dotCount = Math.ceil(slideCount / slidesToScroll);\n    var swipeDirection = getSwipeDirection(spec.touchObject, verticalSwiping);\n    var touchSwipeLength = touchObject.swipeLength;\n    if (!infinite) {\n        if (currentSlide === 0 && (swipeDirection === \"right\" || swipeDirection === \"down\") || currentSlide + 1 >= dotCount && (swipeDirection === \"left\" || swipeDirection === \"up\") || !canGoNext(spec) && (swipeDirection === \"left\" || swipeDirection === \"up\")) {\n            touchSwipeLength = touchObject.swipeLength * edgeFriction;\n            if (edgeDragged === false && onEdge) {\n                onEdge(swipeDirection);\n                state[\"edgeDragged\"] = true;\n            }\n        }\n    }\n    if (!swiped && swipeEvent) {\n        swipeEvent(swipeDirection);\n        state[\"swiped\"] = true;\n    }\n    if (!vertical) {\n        if (!rtl) {\n            swipeLeft = curLeft + touchSwipeLength * positionOffset;\n        } else {\n            swipeLeft = curLeft - touchSwipeLength * positionOffset;\n        }\n    } else {\n        swipeLeft = curLeft + touchSwipeLength * (listHeight / listWidth) * positionOffset;\n    }\n    if (verticalSwiping) {\n        swipeLeft = curLeft + touchSwipeLength * positionOffset;\n    }\n    state = _objectSpread(_objectSpread({}, state), {}, {\n        touchObject: touchObject,\n        swipeLeft: swipeLeft,\n        trackStyle: getTrackCSS(_objectSpread(_objectSpread({}, spec), {}, {\n            left: swipeLeft\n        }))\n    });\n    if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {\n        return state;\n    }\n    if (touchObject.swipeLength > 10) {\n        state[\"swiping\"] = true;\n        safePreventDefault(e);\n    }\n    return state;\n};\nexports.swipeMove = swipeMove;\nvar swipeEnd = function swipeEnd(e, spec) {\n    var dragging = spec.dragging, swipe = spec.swipe, touchObject = spec.touchObject, listWidth = spec.listWidth, touchThreshold = spec.touchThreshold, verticalSwiping = spec.verticalSwiping, listHeight = spec.listHeight, swipeToSlide = spec.swipeToSlide, scrolling = spec.scrolling, onSwipe = spec.onSwipe, targetSlide = spec.targetSlide, currentSlide = spec.currentSlide, infinite = spec.infinite;\n    if (!dragging) {\n        if (swipe) safePreventDefault(e);\n        return {};\n    }\n    var minSwipe = verticalSwiping ? listHeight / touchThreshold : listWidth / touchThreshold;\n    var swipeDirection = getSwipeDirection(touchObject, verticalSwiping); // reset the state of touch related state variables.\n    var state = {\n        dragging: false,\n        edgeDragged: false,\n        scrolling: false,\n        swiping: false,\n        swiped: false,\n        swipeLeft: null,\n        touchObject: {}\n    };\n    if (scrolling) {\n        return state;\n    }\n    if (!touchObject.swipeLength) {\n        return state;\n    }\n    if (touchObject.swipeLength > minSwipe) {\n        safePreventDefault(e);\n        if (onSwipe) {\n            onSwipe(swipeDirection);\n        }\n        var slideCount, newSlide;\n        var activeSlide = infinite ? currentSlide : targetSlide;\n        switch(swipeDirection){\n            case \"left\":\n            case \"up\":\n                newSlide = activeSlide + getSlideCount(spec);\n                slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;\n                state[\"currentDirection\"] = 0;\n                break;\n            case \"right\":\n            case \"down\":\n                newSlide = activeSlide - getSlideCount(spec);\n                slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;\n                state[\"currentDirection\"] = 1;\n                break;\n            default:\n                slideCount = activeSlide;\n        }\n        state[\"triggerSlideHandler\"] = slideCount;\n    } else {\n        // Adjust the track back to it's original position.\n        var currentLeft = getTrackLeft(spec);\n        state[\"trackStyle\"] = getTrackAnimateCSS(_objectSpread(_objectSpread({}, spec), {}, {\n            left: currentLeft\n        }));\n    }\n    return state;\n};\nexports.swipeEnd = swipeEnd;\nvar getNavigableIndexes = function getNavigableIndexes(spec) {\n    var max = spec.infinite ? spec.slideCount * 2 : spec.slideCount;\n    var breakpoint = spec.infinite ? spec.slidesToShow * -1 : 0;\n    var counter = spec.infinite ? spec.slidesToShow * -1 : 0;\n    var indexes = [];\n    while(breakpoint < max){\n        indexes.push(breakpoint);\n        breakpoint = counter + spec.slidesToScroll;\n        counter += Math.min(spec.slidesToScroll, spec.slidesToShow);\n    }\n    return indexes;\n};\nexports.getNavigableIndexes = getNavigableIndexes;\nvar checkNavigable = function checkNavigable(spec, index) {\n    var navigables = getNavigableIndexes(spec);\n    var prevNavigable = 0;\n    if (index > navigables[navigables.length - 1]) {\n        index = navigables[navigables.length - 1];\n    } else {\n        for(var n in navigables){\n            if (index < navigables[n]) {\n                index = prevNavigable;\n                break;\n            }\n            prevNavigable = navigables[n];\n        }\n    }\n    return index;\n};\nexports.checkNavigable = checkNavigable;\nvar getSlideCount = function getSlideCount(spec) {\n    var centerOffset = spec.centerMode ? spec.slideWidth * Math.floor(spec.slidesToShow / 2) : 0;\n    if (spec.swipeToSlide) {\n        var swipedSlide;\n        var slickList = spec.listRef;\n        var slides = slickList.querySelectorAll && slickList.querySelectorAll(\".slick-slide\") || [];\n        Array.from(slides).every(function(slide) {\n            if (!spec.vertical) {\n                if (slide.offsetLeft - centerOffset + getWidth(slide) / 2 > spec.swipeLeft * -1) {\n                    swipedSlide = slide;\n                    return false;\n                }\n            } else {\n                if (slide.offsetTop + getHeight(slide) / 2 > spec.swipeLeft * -1) {\n                    swipedSlide = slide;\n                    return false;\n                }\n            }\n            return true;\n        });\n        if (!swipedSlide) {\n            return 0;\n        }\n        var currentIndex = spec.rtl === true ? spec.slideCount - spec.currentSlide : spec.currentSlide;\n        var slidesTraversed = Math.abs(swipedSlide.dataset.index - currentIndex) || 1;\n        return slidesTraversed;\n    } else {\n        return spec.slidesToScroll;\n    }\n};\nexports.getSlideCount = getSlideCount;\nvar checkSpecKeys = function checkSpecKeys(spec, keysArray) {\n    return keysArray.reduce(function(value, key) {\n        return value && spec.hasOwnProperty(key);\n    }, true) ? null : console.error(\"Keys Missing:\", spec);\n};\nexports.checkSpecKeys = checkSpecKeys;\nvar getTrackCSS = function getTrackCSS(spec) {\n    checkSpecKeys(spec, [\n        \"left\",\n        \"variableWidth\",\n        \"slideCount\",\n        \"slidesToShow\",\n        \"slideWidth\"\n    ]);\n    var trackWidth, trackHeight;\n    var trackChildren = spec.slideCount + 2 * spec.slidesToShow;\n    if (!spec.vertical) {\n        trackWidth = getTotalSlides(spec) * spec.slideWidth;\n    } else {\n        trackHeight = trackChildren * spec.slideHeight;\n    }\n    var style = {\n        opacity: 1,\n        transition: \"\",\n        WebkitTransition: \"\"\n    };\n    if (spec.useTransform) {\n        var WebkitTransform = !spec.vertical ? \"translate3d(\" + spec.left + \"px, 0px, 0px)\" : \"translate3d(0px, \" + spec.left + \"px, 0px)\";\n        var transform = !spec.vertical ? \"translate3d(\" + spec.left + \"px, 0px, 0px)\" : \"translate3d(0px, \" + spec.left + \"px, 0px)\";\n        var msTransform = !spec.vertical ? \"translateX(\" + spec.left + \"px)\" : \"translateY(\" + spec.left + \"px)\";\n        style = _objectSpread(_objectSpread({}, style), {}, {\n            WebkitTransform: WebkitTransform,\n            transform: transform,\n            msTransform: msTransform\n        });\n    } else {\n        if (spec.vertical) {\n            style[\"top\"] = spec.left;\n        } else {\n            style[\"left\"] = spec.left;\n        }\n    }\n    if (spec.fade) style = {\n        opacity: 1\n    };\n    if (trackWidth) style.width = trackWidth;\n    if (trackHeight) style.height = trackHeight; // Fallback for IE8\n    if (window && !window.addEventListener && window.attachEvent) {\n        if (!spec.vertical) {\n            style.marginLeft = spec.left + \"px\";\n        } else {\n            style.marginTop = spec.left + \"px\";\n        }\n    }\n    return style;\n};\nexports.getTrackCSS = getTrackCSS;\nvar getTrackAnimateCSS = function getTrackAnimateCSS(spec) {\n    checkSpecKeys(spec, [\n        \"left\",\n        \"variableWidth\",\n        \"slideCount\",\n        \"slidesToShow\",\n        \"slideWidth\",\n        \"speed\",\n        \"cssEase\"\n    ]);\n    var style = getTrackCSS(spec); // useCSS is true by default so it can be undefined\n    if (spec.useTransform) {\n        style.WebkitTransition = \"-webkit-transform \" + spec.speed + \"ms \" + spec.cssEase;\n        style.transition = \"transform \" + spec.speed + \"ms \" + spec.cssEase;\n    } else {\n        if (spec.vertical) {\n            style.transition = \"top \" + spec.speed + \"ms \" + spec.cssEase;\n        } else {\n            style.transition = \"left \" + spec.speed + \"ms \" + spec.cssEase;\n        }\n    }\n    return style;\n};\nexports.getTrackAnimateCSS = getTrackAnimateCSS;\nvar getTrackLeft = function getTrackLeft(spec) {\n    if (spec.unslick) {\n        return 0;\n    }\n    checkSpecKeys(spec, [\n        \"slideIndex\",\n        \"trackRef\",\n        \"infinite\",\n        \"centerMode\",\n        \"slideCount\",\n        \"slidesToShow\",\n        \"slidesToScroll\",\n        \"slideWidth\",\n        \"listWidth\",\n        \"variableWidth\",\n        \"slideHeight\"\n    ]);\n    var slideIndex = spec.slideIndex, trackRef = spec.trackRef, infinite = spec.infinite, centerMode = spec.centerMode, slideCount = spec.slideCount, slidesToShow = spec.slidesToShow, slidesToScroll = spec.slidesToScroll, slideWidth = spec.slideWidth, listWidth = spec.listWidth, variableWidth = spec.variableWidth, slideHeight = spec.slideHeight, fade = spec.fade, vertical = spec.vertical;\n    var slideOffset = 0;\n    var targetLeft;\n    var targetSlide;\n    var verticalOffset = 0;\n    if (fade || spec.slideCount === 1) {\n        return 0;\n    }\n    var slidesToOffset = 0;\n    if (infinite) {\n        slidesToOffset = -getPreClones(spec); // bring active slide to the beginning of visual area\n        // if next scroll doesn't have enough children, just reach till the end of original slides instead of shifting slidesToScroll children\n        if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {\n            slidesToOffset = -(slideIndex > slideCount ? slidesToShow - (slideIndex - slideCount) : slideCount % slidesToScroll);\n        } // shift current slide to center of the frame\n        if (centerMode) {\n            slidesToOffset += parseInt(slidesToShow / 2);\n        }\n    } else {\n        if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {\n            slidesToOffset = slidesToShow - slideCount % slidesToScroll;\n        }\n        if (centerMode) {\n            slidesToOffset = parseInt(slidesToShow / 2);\n        }\n    }\n    slideOffset = slidesToOffset * slideWidth;\n    verticalOffset = slidesToOffset * slideHeight;\n    if (!vertical) {\n        targetLeft = slideIndex * slideWidth * -1 + slideOffset;\n    } else {\n        targetLeft = slideIndex * slideHeight * -1 + verticalOffset;\n    }\n    if (variableWidth === true) {\n        var targetSlideIndex;\n        var trackElem = trackRef && trackRef.node;\n        targetSlideIndex = slideIndex + getPreClones(spec);\n        targetSlide = trackElem && trackElem.childNodes[targetSlideIndex];\n        targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;\n        if (centerMode === true) {\n            targetSlideIndex = infinite ? slideIndex + getPreClones(spec) : slideIndex;\n            targetSlide = trackElem && trackElem.children[targetSlideIndex];\n            targetLeft = 0;\n            for(var slide = 0; slide < targetSlideIndex; slide++){\n                targetLeft -= trackElem && trackElem.children[slide] && trackElem.children[slide].offsetWidth;\n            }\n            targetLeft -= parseInt(spec.centerPadding);\n            targetLeft += targetSlide && (listWidth - targetSlide.offsetWidth) / 2;\n        }\n    }\n    return targetLeft;\n};\nexports.getTrackLeft = getTrackLeft;\nvar getPreClones = function getPreClones(spec) {\n    if (spec.unslick || !spec.infinite) {\n        return 0;\n    }\n    if (spec.variableWidth) {\n        return spec.slideCount;\n    }\n    return spec.slidesToShow + (spec.centerMode ? 1 : 0);\n};\nexports.getPreClones = getPreClones;\nvar getPostClones = function getPostClones(spec) {\n    if (spec.unslick || !spec.infinite) {\n        return 0;\n    }\n    return spec.slideCount;\n};\nexports.getPostClones = getPostClones;\nvar getTotalSlides = function getTotalSlides(spec) {\n    return spec.slideCount === 1 ? 1 : getPreClones(spec) + spec.slideCount + getPostClones(spec);\n};\nexports.getTotalSlides = getTotalSlides;\nvar siblingDirection = function siblingDirection(spec) {\n    if (spec.targetSlide > spec.currentSlide) {\n        if (spec.targetSlide > spec.currentSlide + slidesOnRight(spec)) {\n            return \"left\";\n        }\n        return \"right\";\n    } else {\n        if (spec.targetSlide < spec.currentSlide - slidesOnLeft(spec)) {\n            return \"right\";\n        }\n        return \"left\";\n    }\n};\nexports.siblingDirection = siblingDirection;\nvar slidesOnRight = function slidesOnRight(_ref) {\n    var slidesToShow = _ref.slidesToShow, centerMode = _ref.centerMode, rtl = _ref.rtl, centerPadding = _ref.centerPadding;\n    // returns no of slides on the right of active slide\n    if (centerMode) {\n        var right = (slidesToShow - 1) / 2 + 1;\n        if (parseInt(centerPadding) > 0) right += 1;\n        if (rtl && slidesToShow % 2 === 0) right += 1;\n        return right;\n    }\n    if (rtl) {\n        return 0;\n    }\n    return slidesToShow - 1;\n};\nexports.slidesOnRight = slidesOnRight;\nvar slidesOnLeft = function slidesOnLeft(_ref2) {\n    var slidesToShow = _ref2.slidesToShow, centerMode = _ref2.centerMode, rtl = _ref2.rtl, centerPadding = _ref2.centerPadding;\n    // returns no of slides on the left of active slide\n    if (centerMode) {\n        var left = (slidesToShow - 1) / 2 + 1;\n        if (parseInt(centerPadding) > 0) left += 1;\n        if (!rtl && slidesToShow % 2 === 0) left += 1;\n        return left;\n    }\n    if (rtl) {\n        return slidesToShow - 1;\n    }\n    return 0;\n};\nexports.slidesOnLeft = slidesOnLeft;\nvar canUseDOM = function canUseDOM() {\n    return !!( false && 0);\n};\nexports.canUseDOM = canUseDOM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-slick/lib/utils/innerSliderUtils.js\n");

/***/ })

};
;